@using X.PagedList
@using X.PagedList.Mvc.Core
@model IPagedList<DolphinFx.Models.Environment>

@{
    ViewData["Title"] = "Index";
}

<style>
    /*pagination*/
    .pg {
        margin-top: 40px;
    }

    .pagination {

        display: flex;
        /* Use flexbox for better alignment */
        justify-content: center;
        /* Center the pagination */
        align-items: center;
        /* Align items vertically in the center */
    }

    .pagination li {
        list-style: none;
        /* Remove default list styling */
        margin: 0 5px;
        /* Space between buttons */
    }

    .pagination li a {

        text-decoration: none;
        /* Remove underline from links */

        padding: 1px 7px;
        /* Add padding for better click area */
        font-size: 14px;
        /* Set a larger font size */
        border: 1px solid #007bff;
        /* Border for buttons */
        border-radius: 4px;
        /* Rounded corners */
        color: #007bff;
        /* Text color for links */
        background-color: white;
        /* Background color */
        line-height: 1.5;
        /* Adjust line height for vertical centering */
        display: inline-block;
        /* Ensure the link behaves as a block */
        transition: background-color 0.3s, color 0.3s;
        /* Smooth transitions */
    }

    .pagination li a:hover {
        background-color: #007bff;
        /* Change background on hover */
        color: white;
        /* Change text color on hover */
    }

    /* Optional: Highlight the active page */
    .pagination li.active a {
        background-color: #007bff;
        /* Highlight active page */
        color: white;
        /* Change text color for active page */
    }

    .table {
        text-align: center;
        margin: 0 auto;
    }

    body {
        height: 100%;
        margin: 0;
        justify-content: center;
        /* Horizontal centering */
        align-items: center;
        /* Vertical centering */
        text-align: center;
        /* Centers text and table content */
    }

    .button-container {
        text-align: right;
        /* Align buttons to the right */
        margin-right: auto;
        /* Optional margin to add space from the right */
    }

    .button-container {
        margin: 0;
        /* Remove default margin */
    }

    .environment-row {
        cursor: pointer;
    }
</style>

<h1>Environments Table</h1>

<div class="search-button-container">
    <div class="search-container">
        <input type="text" id="searchInput" class="form-control" placeholder="Search environments..." />
    </div>
    <p class="button-container">
        <a class="btn btn-primary" asp-action="Create">Create New</a>
        <a class="btn btn-success" asp-action="ExportToExcel">Export to Excel</a>
    </p>
</div>

<div id="environmentTablePlaceholder">
    @await Html.PartialAsync("_EnvironmentTablePartial", Model) <!-- Initial data load -->
</div>



@section Scripts {
    <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>
        $(document).ready(function () {
        @if (TempData["InfoMessage"] != null)
        {
            <text>
                        $('#infoModal').modal('show');
            </text>
        }
                // Check if there is a success message
                var successMessage = '@TempData["SuccessMessage"]';
            if (successMessage) {
                $("#successModal").modal("show");
            }

            // Real-time filtering of table rows
            $('#searchInput').on('input', function () {
                let searchTerm = $(this).val();
                $.ajax({
                    url: '@Url.Action("Index", "Environments")',
                    data: { searchTerm: searchTerm },
                    success: function (data) {
                        $('#environmentTablePlaceholder').html(data);
                    }
                });
            });
            $('.environment-row').on('dblclick', function () {
                var id = $(this).data('id');
                loadEnvironmentDetails(id);
            });
        });
        function loadEnvironmentDetails(id) {
            $.ajax({
                url: '@Url.Action("Details", "Environments")/' + id,
                type: 'GET',
                success: function (result) {
                    $('#environmentDetailsBody').html(result);
                    $('#environmentDetailsModal').modal('show');
                },
                error: function (xhr, status, error) {
                    alert("An error occurred while loading the details: " + error);
                    console.error("Error details:", xhr, status, error);
                }
            });
        }
        @* function loadForm(url, container, disableButtonClass, enableButtonClass) {
            // Disable the specified buttons before making the AJAX call
            $(disableButtonClass).prop('disabled', true).addClass('disabled');
            $(enableButtonClass).prop('disabled', true).addClass('disabled');
            $.ajax({
                url: url,
                type: 'GET',
                success: function (result) {
                    $(container).html(result);
                    $('html, body').animate({
                        scrollTop: $(container).offset().top
                    }, 1000);
                },
                error: function (xhr, status, error) {
                    alert("An error occurred: " + error);
                    console.error("Error details:", xhr, status, error);
                },
                complete: function () {
                    // Re-enable the other button after AJAX call completes
                    $(enableButtonClass).prop('disabled', false);
                }
            });
        } *@
        @* function loadEditForm(id) {
            loadForm('@Url.Action("Edit", "Environments")/' + id, '#editFormContainer', '.create-button', '.edit-button');
        }
        function loadCreateForm() {
            loadForm('@Url.Action("Create", "Environments")', '#createFormContainer', '.edit-button', '.create-button');
        } *@
    </script>
}
